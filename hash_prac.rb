# 散列(hash)也是一个程序中常用到的容器。在散列中，一般是以字符串或者符号作为键， 来保存对应的对象

# 符号， symbol。符号(symbol)与字符串对象很相似（可以将符号简单理解为轻量级字符串），符号也是对象，一般作为名称标签使用， 表示方法等的对象的名称。
# 要创建符号，只需在标识符的开头加上 : 就可以了

sym = :foo       # 表示符号“:foo”
sym2 = :"foo"    # 意思同上

# 符号能实现的功能，大部分字符串也能实现。但在像散列的键这样只是单纯判断“是否相 等”的处理中，使用符号会比字符串更加有效率，因此在实际编程中我们也会时常用到符号。
# 另外，符号与字符串可以互相转换。对符号使用 to_s 方法，则可以得到对应的字符串。反之，对字符串使用 to_sym 方法，则可以得到对应的符号。

print sym.to_s
print "foo".to_sym

# 创建散列的方法与创建数组的方法差不多，不同的是不使用 []，而是使用 {} 把创建的内容 括起来。
# 散列用“键 => 对象”这种格式来定义获取对象时所需的键(key)，以及键相对应的对象(object)。
# 通常我们会使用符号、字符串、数值作为散列的键。

song = { :title => "Paranoid Android", :artist => "Radiohead"}
person = { "名字" => "高桥", "拼音" => "gaoqiao"}
mark = { 11 => "Jack", 12 => "Queen", 13 => "King"}

# 尤其是我们常常把符号当作键使用，因此 Ruby 提供了一个专门的简短写法。下面两行程序 表达的意思相同。
person1 = { :name => "后藤", :pinyin => "houteng"} 
person2 = { name: "后藤", pinyin: "houteng"}

# 从散列中取出对象: 散列名 [ 键 ]
# 保存对象时使用:   散列名[键] = 希望保存的对象

# 使用 each 方法可以遍历散列中的所有元素，逐个取出其元素的键和对应的值。
# 循环数组时 是按索引顺序遍历元素，循环散列时则是按照键值组合遍历元素。
# 散列的 each 语法如下所示:
# 散列.each do |键变量, 值变量 | 
#   希望循环的处理
# end

# 用法：
address = {name: "高桥", pinyin: "gaoqiao"}
address.each do |key, value|
    puts "#{key}: #{value}"
end
